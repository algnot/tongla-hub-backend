name: Deployment Workflow

on: [push]

jobs:

  Deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: tonkla-vm-deploy-env

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Cloudflared
        run: |
          curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: Authenticate Cloudflare Tunnel
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARED_TUNNEL_CREDENTIALS }}" > ~/.cloudflared/credentials.json
          echo "${{ secrets.CLOUDFLARED_TUNNEL_SECRETKEY }}" > ~/.cloudflared/cert.pem

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLOUDFLARED_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Sync Environment
        run: |
          cat > .env << EOF
          FLASK_RUN_PORT=9000
          FLASK_RUN_HOST=0.0.0.0
          FLASK_RUN_DEBUG=true
          
          APP_PORT=9000
          APP_VERSION=${{ github.sha }}
          APP_ENV=production
          SOCKET_PORT=9001
          
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          
          EMAIL_API_ENDPOINT=${{ secrets.EMAIL_API_ENDPOINT }}
          EMAIL_API_SERVICE_ID=${{ secrets.EMAIL_API_SERVICE_ID }}
          EMAIL_API_TEMPLATE_ID=${{ secrets.EMAIL_API_TEMPLATE_ID }}
          EMAIL_API_USER_ID=${{ secrets.EMAIL_API_USER_ID }}
          EMAIL_API_ACCESS_TOKEN=${{ secrets.EMAIL_API_ACCESS_TOKEN }}
          
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}
          RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}
          RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
          
          S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
          S3_PUBLIC_ENDPOINT=${{ secrets.S3_PUBLIC_ENDPOINT }}
          S3_ACCESS_TOKEN=${{ secrets.S3_ACCESS_TOKEN }}
          S3_SECRET_TOKEN=${{ secrets.S3_SECRET_TOKEN }}
          
          BACKUP_DATABASE_HOST=${{ secrets.BACKUP_DATABASE_HOST }}
          BACKUP_DATABASE_PORT=${{ secrets.BACKUP_DATABASE_PORT }}
          BACKUP_DATABASE_USERNAME=${{ secrets.BACKUP_DATABASE_USERNAME }}
          BACKUP_DATABASE_PASSWORD=${{ secrets.BACKUP_DATABASE_PASSWORD }}
          BACKUP_DATABASE_NAME=${{ secrets.BACKUP_DATABASE_NAME }}
          
          APPLE_MUSIC_SOCKET_HOST=${{ secrets.APPLE_MUSIC_SOCKET_HOST }}
          
          OPENID_CLIENT_ID=${{ secrets.OPENID_CLIENT_ID }}
          OPENID_CLIENT_SECRET=${{ secrets.OPENID_CLIENT_SECRET }}
          EOF
          
          cat ./.env | ssh -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} 'cat > ~/server/tongla-hub-backend/.env'

      - name: Access Server
        run: |
          ssh -tt -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} << EOF
          
          set -e
          cd server/tongla-hub-backend/
          git fetch --all 
          git reset --hard origin/main 

          docker system prune
          docker image prune -a -f
          docker compose up --build -d
          
          exit