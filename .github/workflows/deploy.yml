name: Deployment Workflow

on: [push]

jobs:

  Deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: tonkla-vm-deploy-env

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Cloudflared
        run: |
          curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: Authenticate Cloudflare Tunnel
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARED_TUNNEL_CREDENTIALS }}" > ~/.cloudflared/credentials.json
          echo "${{ secrets.CLOUDFLARED_TUNNEL_SECRETKEY }}" > ~/.cloudflared/cert.pem

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLOUDFLARED_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Access Server
        run: |
          ssh -tt -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} << EOF
          
          cd server/tongla-hub-backend/
          git fetch --all 
          git reset --hard origin/main 

          echo "FLASK_RUN_PORT=9000" > .env
          echo "FLASK_RUN_HOST=0.0.0.0" >> .env
          echo "FLASK_RUN_DEBUG=true" >> .env
          echo "APP_PORT=9000" >> .env
          echo "APP_VERSION=${{ github.sha }}" >> .env
          echo "APP_ENV=production" >> .env
          echo "SOCKET_PORT=9001" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "EMAIL_API_ENDPOINT=${{ secrets.EMAIL_API_ENDPOINT }}" >> .env
          echo "EMAIL_API_SERVICE_ID=${{ secrets.EMAIL_API_SERVICE_ID }}" >> .env
          echo "EMAIL_API_TEMPLATE_ID=${{ secrets.EMAIL_API_TEMPLATE_ID }}" >> .env
          echo "EMAIL_API_USER_ID=${{ secrets.EMAIL_API_USER_ID }}" >> .env
          echo "EMAIL_API_ACCESS_TOKEN=${{ secrets.EMAIL_API_ACCESS_TOKEN }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}" >> .env
          echo "RABBITMQ_POST=${{ secrets.RABBITMQ_POST }}" >> .env
          echo "RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}" >> .env
          echo "RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}" >> .env    
          echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> .env
          echo "S3_PUBLIC_ENDPOINT=${{ secrets.S3_PUBLIC_ENDPOINT }}" >> .env
          echo "S3_ACCESS_TOKEN=${{ secrets.S3_ACCESS_TOKEN }}" >> .env
          echo "S3_SECRET_TOKEN=${{ secrets.S3_SECRET_TOKEN }}" >> .env

          docker system prune
          docker image prune -a -f
          docker compose up --build -d
          docker stop tongla-hub-backend-mysql-1
          docker ps
          echo "Deploy completed!"
          
          exit
          EOF